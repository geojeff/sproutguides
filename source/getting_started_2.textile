h2. Getting Started: Part 2


In Part 1, we walked through the basic pieces of a SproutCore app. In Part 2
we introduce some of the guiding concepts behind a SproutCore application
such as views, controllers, and statecharts.

In Part 2, you'll:

* Learn about statecharts and how they can improve your application.
* Create a new statechart-based SproutCore application.
* Learn about views and how they should handle events.
* Learn how to pass those events to the application's statechart.
* Learn the basics of organizing your statechart in SproutCore.

endprologue.

h3. Why Statecharts?

If you've ever built any sizable application, or even small ones for that matter, you've
probably run into a bug that was caused by some piece of logic that didn't work quite as
you intended.

Perhaps it was an if statement with an invalid test, or some piece of code that changed
a variable that you weren't expecting to be updated.

Whatever the sitatution, it was probably caused because you didn't know exactly how your
app would react under a particular set of conditions. Statecharts aim to solve these issues by
helping you remove the uncertainty, and by defining exactly what can, and cannot, happen
within your application.

h3. What is a Statechart?

A statechart is a simple, nested construct that helps you better organize your code into
logical, and hierarchical segments called states. Your applications will have many states,
and each state may have many substates underneath it. Each state can respond to a certain
set of actions.

For instance, your application may have the following two top-level states with the
following substates and actions:

# LOADING
#* _loadingFinishedAction_
# LOADED
##* _viewTermsOfServiceAction_
##* _viewPrivacyPolicyAction_
### LOGGED_OUT
###* _loginAction_
### LOGGED_IN
###* _createTodoAction_
###* _completeTodoAction_
###* _clearTodosAction_

NOTE: Throughout the Getting Started guides, you will see states in ALL_CAPS for the sake of continuity.
However, the states are standard SC objects and can follow any naming convention you want.  Many developers
prefer CamelCase (i.e.  MyApp.LoggedInState) while others prefer namespacing their states (i.e.
MyApp.States.LoggedIn).  Whatever method you choose is fine, just be sure to be consistent so other developers
can more easily follow your code.

h4. Decoding the Statechart

Your application can either be in one of the two top level states: LOADING or LOADED. If it is in one, it
cannot be in the other. When it's in the LOADING state, the only available action is the
_loadingFinishedAction_ . The statechart/application should not respond to any other events. Once it moves into
the LOADED state, it can be in two additional substates: LOGGED_OUT or LOGGED_IN. Again, it can only be in
one, so when the user is "logged out", the only available action is _loginAction_.

However, notice that the _viewTermsOfServiceAction_ and the _viewPrivacyPolicyAction_ are both available to
the LOADED state. This means that regardless of whether the user is in the LOGGED_OUT state or the LOGGED_IN
state, they should be allowed to view the terms of service, or the privacy policy.

Once the user has authenticated and logged in, they have three new actions available: the _createTodoAction_,
the _completeTodoAction_ and the _clearTodosAction_.

h4. How Statecharts Help

As you can see, your application only responds to certain actions (or events) at certain times. This makes it
much easier to verify that your app is working properly, by ensuring that you handle events exactly when they
need to be handled, and that even if your user interface allows an action when it shouldn't (like creating a
todo when you are logged out), the application itself will maintain a consistent state and continue to
operate.

Additionally, all states may define an _enterState()_ and an _exitState()_ function to help them prepare for
the new state, or cleanup after themselves. These functions are generally where you show or hide user
interface components, or set the content on your controllers.

h3. Creating the Statechart

TODO: Create the statechart app.

h3. Where Views Fit In

TODO: Talk about views.

h3. Organizing Your Statechart

TODO: Talk about organization.

h3. Changelog

* May 5, 2011: initial version by "Piotr Sarnacki":credits.html#drogus
* May 9, 2011: Stylistic edits by "Tom Dale":credits.html#tomdale
* February 27, 2012: rewrite for SproutCore 1.8 by the 1.8 release sprint team, including the following who worked on this task: "Tim Evans":credits.html#tce, "Tyler Keating":credits.html#publickeating, "Maurits Lamers":credits.html#mauritslamers, "Jeff Pittman":credits.html#geojeff, "Topher Fangio":credits.html#topherfangio

